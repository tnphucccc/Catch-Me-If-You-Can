Index: src/main/java/core/TileManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core;\r\n\r\nimport graphics.BufferedImageLoader;\r\nimport graphics.SpriteSheet;\r\nimport graphics.Window;\r\nimport variables.Constant;\r\n\r\nimport java.awt.*;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class TileManager {\r\n    public static TileManager instance = null;\r\n    Window window;\r\n    public static Tile[] tiles;\r\n    SpriteSheet sheet;\r\n    public static int[][] map;\r\n    BufferedImageLoader loader = new BufferedImageLoader();\r\n\r\n    public TileManager() {\r\n        tiles = new Tile[10];\r\n        map = new int[Constant.MAX_SCREEN_COL][Constant.MAX_SCREEN_ROW];\r\n        getTileImage();\r\n        loadMap(\"/Map/map01.txt\");\r\n    }\r\n\r\n    public static TileManager getInstance() {\r\n        if (instance == null) {\r\n            instance = new TileManager();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public void getTileImage() {\r\n        try {\r\n            sheet = new SpriteSheet(loader.loadImage(\"/Tiles/tiles.png\"));\r\n            tiles[0] = new Tile();\r\n            tiles[0].image = sheet.crop(0, 0, 16, 16);\r\n            tiles[0].collision = true;\r\n\r\n            tiles[1] = new Tile();\r\n            tiles[1].image = sheet.crop(16, 0, 16, 16);\r\n\r\n            tiles[2] = new Tile();\r\n            tiles[2].image = sheet.crop(32, 0, 16, 16);\r\n\r\n            tiles[3] = new Tile();\r\n            tiles[3].image = sheet.crop(48, 0, 16, 16);\r\n\r\n            tiles[4] = new Tile();\r\n            tiles[4].image = loader.loadImage(\"/Tiles/Sand.png\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void loadMap(String path) {\r\n        try {\r\n            InputStream is = getClass().getResourceAsStream(path);\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(is));\r\n\r\n            int col = 0;\r\n            int row = 0;\r\n\r\n            while (col < Constant.MAX_SCREEN_COL && row < Constant.MAX_SCREEN_ROW) {\r\n                String line = br.readLine();\r\n                while (col < Constant.MAX_SCREEN_COL) {\r\n                    String[] numbers = line.split(\" \");\r\n\r\n                    int num = Integer.parseInt(numbers[col]);\r\n\r\n                    map[col][row] = num;\r\n                    col++;\r\n                }\r\n                if (col == Constant.MAX_SCREEN_COL) {\r\n                    col = 0;\r\n                    row++;\r\n                }\r\n            }\r\n            br.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void update() {\r\n\r\n    }\r\n\r\n    public void draw(Graphics2D g2) {\r\n        int col = 0;\r\n        int row = 0;\r\n        int x = 0;\r\n        int y = 0;\r\n\r\n        while (col < Constant.MAX_SCREEN_COL && row < Constant.MAX_SCREEN_ROW) {\r\n            int tileNum = map[col][row];\r\n            g2.drawImage(tiles[tileNum].image, x, y, Constant.TILE_SIZE, Constant.TILE_SIZE, null);\r\n            col++;\r\n            x += Constant.TILE_SIZE;\r\n\r\n            if (col == Constant.MAX_SCREEN_COL) {\r\n                col = 0;\r\n                row++;\r\n                x = 0;\r\n                y += Constant.TILE_SIZE;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/core/TileManager.java b/src/main/java/core/TileManager.java
--- a/src/main/java/core/TileManager.java	(revision f96a25f392b6f3fdd074112dd17ac8b15d69a5c9)
+++ b/src/main/java/core/TileManager.java	(date 1684218168808)
@@ -1,112 +1,14 @@
 package core;
 
-import graphics.BufferedImageLoader;
-import graphics.SpriteSheet;
-import graphics.Window;
-import variables.Constant;
-
-import java.awt.*;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-
 public class TileManager {
+    public Tile[] tiles;
+    public int[][] map;
     public static TileManager instance = null;
-    Window window;
-    public static Tile[] tiles;
-    SpriteSheet sheet;
-    public static int[][] map;
-    BufferedImageLoader loader = new BufferedImageLoader();
-
-    public TileManager() {
-        tiles = new Tile[10];
-        map = new int[Constant.MAX_SCREEN_COL][Constant.MAX_SCREEN_ROW];
-        getTileImage();
-        loadMap("/Map/map01.txt");
-    }
-
-    public static TileManager getInstance() {
-        if (instance == null) {
+    public static TileManager getInstance(){
+        if (instance == null){
             instance = new TileManager();
         }
         return instance;
     }
 
-    public void getTileImage() {
-        try {
-            sheet = new SpriteSheet(loader.loadImage("/Tiles/tiles.png"));
-            tiles[0] = new Tile();
-            tiles[0].image = sheet.crop(0, 0, 16, 16);
-            tiles[0].collision = true;
-
-            tiles[1] = new Tile();
-            tiles[1].image = sheet.crop(16, 0, 16, 16);
-
-            tiles[2] = new Tile();
-            tiles[2].image = sheet.crop(32, 0, 16, 16);
-
-            tiles[3] = new Tile();
-            tiles[3].image = sheet.crop(48, 0, 16, 16);
-
-            tiles[4] = new Tile();
-            tiles[4].image = loader.loadImage("/Tiles/Sand.png");
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void loadMap(String path) {
-        try {
-            InputStream is = getClass().getResourceAsStream(path);
-            BufferedReader br = new BufferedReader(new InputStreamReader(is));
-
-            int col = 0;
-            int row = 0;
-
-            while (col < Constant.MAX_SCREEN_COL && row < Constant.MAX_SCREEN_ROW) {
-                String line = br.readLine();
-                while (col < Constant.MAX_SCREEN_COL) {
-                    String[] numbers = line.split(" ");
-
-                    int num = Integer.parseInt(numbers[col]);
-
-                    map[col][row] = num;
-                    col++;
-                }
-                if (col == Constant.MAX_SCREEN_COL) {
-                    col = 0;
-                    row++;
-                }
-            }
-            br.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void update() {
-
-    }
-
-    public void draw(Graphics2D g2) {
-        int col = 0;
-        int row = 0;
-        int x = 0;
-        int y = 0;
-
-        while (col < Constant.MAX_SCREEN_COL && row < Constant.MAX_SCREEN_ROW) {
-            int tileNum = map[col][row];
-            g2.drawImage(tiles[tileNum].image, x, y, Constant.TILE_SIZE, Constant.TILE_SIZE, null);
-            col++;
-            x += Constant.TILE_SIZE;
-
-            if (col == Constant.MAX_SCREEN_COL) {
-                col = 0;
-                row++;
-                x = 0;
-                y += Constant.TILE_SIZE;
-            }
-        }
-    }
 }
Index: src/main/java/graphics/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphics;\r\n\r\nimport core.TileManager;\r\nimport entities.Player;\r\n\r\nimport java.awt.*;\r\n\r\npublic class Game extends Scene {\r\n    TileManager tileM;\r\n    Player player;\r\n\r\n    public Game() {\r\n        tileM = TileManager.getInstance();\r\n        player = new Player();\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n        tileM.update();\r\n        player.update();\r\n    }\r\n\r\n    @Override\r\n    public void draw(Graphics g) {\r\n        Graphics2D g2d = (Graphics2D) g;\r\n        tileM.draw(g2d);\r\n        player.draw(g2d);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/graphics/Game.java b/src/main/java/graphics/Game.java
--- a/src/main/java/graphics/Game.java	(revision f96a25f392b6f3fdd074112dd17ac8b15d69a5c9)
+++ b/src/main/java/graphics/Game.java	(date 1684218172649)
@@ -1,29 +1,19 @@
 package graphics;
 
-import core.TileManager;
-import entities.Player;
-
 import java.awt.*;
 
 public class Game extends Scene {
-    TileManager tileM;
-    Player player;
-
     public Game() {
-        tileM = TileManager.getInstance();
-        player = new Player();
+
     }
 
     @Override
     public void update() {
-        tileM.update();
-        player.update();
+
     }
 
     @Override
     public void draw(Graphics g) {
-        Graphics2D g2d = (Graphics2D) g;
-        tileM.draw(g2d);
-        player.draw(g2d);
+
     }
 }
Index: src/main/java/variables/Constant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package variables;\r\n\r\npublic class Constant {\r\n    public static final int MAX_SCREEN_COL = 20;\r\n    public static final int MAX_SCREEN_ROW = 15;\r\n    public static final int SCALE = 3;\r\n    public static final int ORIGINAL_TILE_SIZE = 16;\r\n    public static final int TILE_SIZE = ORIGINAL_TILE_SIZE * SCALE; // 48\r\n    public static final int WIDTH = TILE_SIZE * MAX_SCREEN_COL; // 816\r\n    //Player position in main screen\r\n    public static final int PLAYER_SCREEN_X = WIDTH / 2 - TILE_SIZE / 2;\r\n    public static final int HEIGHT = TILE_SIZE * MAX_SCREEN_ROW; // 528\r\n    public static final int PLAYER_SCREEN_Y = HEIGHT / 2 - TILE_SIZE / 2;\r\n    public static final String TITLE = \"Catch Me If You Can\";\r\n    public static final int FPS = 60;\r\n    //public static final int Tera= 1_000_000_000;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/variables/Constant.java b/src/main/java/variables/Constant.java
--- a/src/main/java/variables/Constant.java	(revision f96a25f392b6f3fdd074112dd17ac8b15d69a5c9)
+++ b/src/main/java/variables/Constant.java	(date 1684218172957)
@@ -1,16 +1,26 @@
 package variables;
 
 public class Constant {
-    public static final int MAX_SCREEN_COL = 20;
-    public static final int MAX_SCREEN_ROW = 15;
     public static final int SCALE = 3;
     public static final int ORIGINAL_TILE_SIZE = 16;
     public static final int TILE_SIZE = ORIGINAL_TILE_SIZE * SCALE; // 48
+
+    public static final int MAX_SCREEN_COL = 17;
+    public static final int MAX_SCREEN_ROW = 11;
+
     public static final int WIDTH = TILE_SIZE * MAX_SCREEN_COL; // 816
+    public static final int HEIGHT = TILE_SIZE * MAX_SCREEN_ROW ; // 528
+
+    //WORLD SIZE
+    public static int MAX_WORLD_COL = 50;
+    public static int MAX_WORLD_ROW = 50;
+    public static final int WORLD_WIDTH = TILE_SIZE * MAX_WORLD_COL;
+    public static final int WORLD_HEIGHT = TILE_SIZE * MAX_WORLD_ROW;
+
     //Player position in main screen
-    public static final int PLAYER_SCREEN_X = WIDTH / 2 - TILE_SIZE / 2;
-    public static final int HEIGHT = TILE_SIZE * MAX_SCREEN_ROW; // 528
-    public static final int PLAYER_SCREEN_Y = HEIGHT / 2 - TILE_SIZE / 2;
+    public static final int PLAYER_SCREEN_X = WIDTH/2 - TILE_SIZE/2;
+    public static final int PLAYER_SCREEN_Y = HEIGHT/2 - TILE_SIZE/2;
+
     public static final String TITLE = "Catch Me If You Can";
     public static final int FPS = 60;
     //public static final int Tera= 1_000_000_000;
Index: src/main/resources/Map/Map.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/Map/Map.txt b/src/main/resources/Map/Map.txt
new file mode 100644
--- /dev/null	(date 1684218175784)
+++ b/src/main/resources/Map/Map.txt	(date 1684218175784)
@@ -0,0 +1,11 @@
+4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
+4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4
+4 1 3 3 2 3 3 3 3 3 3 2 3 3 3 1 4
+4 1 0 0 2 1 2 1 2 1 2 1 0 2 0 1 4
+4 1 2 2 1 1 2 3 0 3 2 1 0 2 2 1 4
+4 1 0 0 3 3 0 1 2 1 2 1 0 0 0 1 4
+4 1 0 0 0 0 0 2 3 3 0 1 1 2 1 1 4
+4 1 2 1 2 1 2 1 2 1 2 1 3 2 3 1 4
+4 1 0 3 0 3 0 3 3 3 3 2 0 0 2 1 4
+4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4
+4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
