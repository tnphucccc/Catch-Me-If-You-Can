Index: src/main/java/variables/Constant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package variables;\r\n\r\npublic class Constant {\r\n    public static final int SCALE = 3;\r\n    public static final int ORIGINAL_TILE_SIZE = 16;\r\n    public static final int TILE_SIZE = ORIGINAL_TILE_SIZE * SCALE; // 48\r\n\r\n    public static final int MAX_SCREEN_COL = 17;\r\n    public static final int MAX_SCREEN_ROW = 11;\r\n\r\n    public static final int WIDTH = TILE_SIZE * MAX_SCREEN_COL; // 816\r\n    public static final int HEIGHT = TILE_SIZE * MAX_SCREEN_ROW ; // 528\r\n\r\n    //WORLD SIZE\r\n    public static int MAX_WORLD_COL = 50;\r\n    public static int MAX_WORLD_ROW = 50;\r\n    public static final int WORLD_WIDTH = TILE_SIZE * MAX_WORLD_COL;\r\n    public static final int WORLD_HEIGHT = TILE_SIZE * MAX_WORLD_ROW;\r\n\r\n    //Player position in main screen\r\n    public static final int PLAYER_SCREEN_X = WIDTH/2 - TILE_SIZE/2;\r\n    public static final int PLAYER_SCREEN_Y = HEIGHT/2 - TILE_SIZE/2;\r\n\r\n    public static final String TITLE = \"Catch Me If You Can\";\r\n    public static final int FPS = 60;\r\n    //public static final int Tera= 1_000_000_000;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/variables/Constant.java b/src/main/java/variables/Constant.java
--- a/src/main/java/variables/Constant.java	(revision 3e941b2f4ae2e7cfea2d4f4df0d39b2b4d3901bf)
+++ b/src/main/java/variables/Constant.java	(date 1683957514720)
@@ -11,16 +11,6 @@
     public static final int WIDTH = TILE_SIZE * MAX_SCREEN_COL; // 816
     public static final int HEIGHT = TILE_SIZE * MAX_SCREEN_ROW ; // 528
 
-    //WORLD SIZE
-    public static int MAX_WORLD_COL = 50;
-    public static int MAX_WORLD_ROW = 50;
-    public static final int WORLD_WIDTH = TILE_SIZE * MAX_WORLD_COL;
-    public static final int WORLD_HEIGHT = TILE_SIZE * MAX_WORLD_ROW;
-
-    //Player position in main screen
-    public static final int PLAYER_SCREEN_X = WIDTH/2 - TILE_SIZE/2;
-    public static final int PLAYER_SCREEN_Y = HEIGHT/2 - TILE_SIZE/2;
-
     public static final String TITLE = "Catch Me If You Can";
     public static final int FPS = 60;
     //public static final int Tera= 1_000_000_000;
Index: src/main/java/core/TileManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core;\r\n\r\npublic class TileManager {\r\n    public Tile[] tiles;\r\n    public int[][] map;\r\n    public static TileManager instance = null;\r\n    public static TileManager getInstance(){\r\n        if (instance == null){\r\n            instance = new TileManager();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/core/TileManager.java b/src/main/java/core/TileManager.java
--- a/src/main/java/core/TileManager.java	(revision 3e941b2f4ae2e7cfea2d4f4df0d39b2b4d3901bf)
+++ b/src/main/java/core/TileManager.java	(date 1683957514748)
@@ -1,5 +1,15 @@
 package core;
 
+import variables.Constant;
+
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.io.IOException;
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.Objects;
+
 public class TileManager {
     public Tile[] tiles;
     public int[][] map;
@@ -10,5 +20,78 @@
         }
         return instance;
     }
+    public TileManager() {
+        tiles = new Tile[10];
+        map = new int[Constant.MAX_SCREEN_ROW][Constant.MAX_SCREEN_COL];
+
+        loadTileImage();
+
+        loadMap("src/main/resources/Map/Map.txt");
+    }
+    private void loadMap(String filePath){
+        try {
+            InputStream is = Objects.requireNonNull(getClass().getResourceAsStream(filePath));
+            BufferedReader br = new BufferedReader(new InputStreamReader(is));
+            int col = 0, row = 0;
+            while (col < Constant.MAX_SCREEN_COL && row < Constant.MAX_SCREEN_ROW){
+                String line = br.readLine();
+                while (col < Constant.MAX_SCREEN_COL){
+                    String[] numbers = line.split(" ");
+                    int num = Integer.parseInt(numbers[col]);
+                    map[row][col] = num;
+                    col++;
+                }
+                if (col == Constant.MAX_SCREEN_COL){
+                    col = 0;
+                    row++;
+                }
+            }
+            br.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+    public void loadTileImage() {
+        try {
+            tiles[0] = new Tile();
+            tiles[0].image = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("src/main/resources/Tiles/Ground.png")));
+
+            tiles[1] = new Tile();
+            tiles[1].image = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("src/main/resources/Tiles/Block.png")));
+            tiles[1].collision = true;
+
+            tiles[2] = new Tile();
+            tiles[2].image = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("src/main/resources/Tiles/Brick.png")));
+            tiles[2].collision = true;
+
+            tiles[3] = new Tile();
+            tiles[3].image = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("src/main/resources/Tiles/GroundShadow.png")));
+
+            tiles[4] = new Tile();
+            tiles[4].image = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("src/main/resources/Tiles/Sand.png")));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+    public void draw(Graphics2D g2) {
+        int worldCol = 0;
+        int worldRow = 0;
+        int x = 0, y = 0;
+
+        while (worldCol < Constant.MAX_SCREEN_COL && worldRow < Constant.MAX_SCREEN_ROW) {
+            int tileNum = map[worldRow][worldCol];
+
+            g2.drawImage(tiles[tileNum].image, x, y, Constant.TILE_SIZE, Constant.TILE_SIZE, null);
+            worldCol++;
+            x += Constant.TILE_SIZE;
 
+            if (worldCol == Constant.MAX_SCREEN_COL) {
+                worldCol = 0;
+                worldRow++;
+                x = 0;
+                y += Constant.TILE_SIZE;
+            }
+        }
+    }
 }
+
Index: src/main/java/graphics/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphics;\r\n\r\nimport java.awt.*;\r\n\r\npublic class Game extends Scene {\r\n    public Game() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void update() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void draw(Graphics g) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/graphics/Game.java b/src/main/java/graphics/Game.java
--- a/src/main/java/graphics/Game.java	(revision 3e941b2f4ae2e7cfea2d4f4df0d39b2b4d3901bf)
+++ b/src/main/java/graphics/Game.java	(date 1683957514832)
@@ -1,10 +1,16 @@
 package graphics;
 
+import entities.*;
+import core.TileManager;
+
 import java.awt.*;
 
 public class Game extends Scene {
+    TileManager tileM;
+    static Player player;
     public Game() {
-
+        player = new Player();
+        tileM = TileManager.getInstance();
     }
 
     @Override
@@ -14,6 +20,7 @@
 
     @Override
     public void draw(Graphics g) {
-
+        Graphics2D g2 = (Graphics2D) g;
+        tileM.draw(g2);
     }
 }
Index: src/main/resources/Map/Map.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/Map/Map.txt b/src/main/resources/Map/Map.txt
new file mode 100644
--- /dev/null	(date 1683957514875)
+++ b/src/main/resources/Map/Map.txt	(date 1683957514875)
@@ -0,0 +1,11 @@
+4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
+4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4
+4 1 3 3 2 3 3 3 3 3 3 2 3 3 3 1 4
+4 1 0 0 2 1 2 1 2 1 2 1 0 2 0 1 4
+4 1 2 2 1 1 2 3 0 3 2 1 0 2 2 1 4
+4 1 0 0 3 3 0 1 2 1 2 1 0 0 0 1 4
+4 1 0 0 0 0 0 2 3 3 0 1 1 2 1 1 4
+4 1 2 1 2 1 2 1 2 1 2 1 3 2 3 1 4
+4 1 0 3 0 3 0 3 3 3 3 2 0 0 2 1 4
+4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4
+4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
